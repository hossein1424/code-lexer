lexer:
    keyword:
        - (?:^abstract$|^assert$|^arguments$|^boolean$|^break$|^byte$|^case$|^catch$|^char$|^const$|^continue$|^debugger$|^default$|^delete$|^double$|^do$|^else$|^eval$|^false$|^finally$|^final$|^float$|^for$|^function$|^goto$|^if$|^implements$|^int$|^in$|^instanceof$|^interface$|^let$|^long$|^native$|^new$|^null$|^package$|^private$|^protected$|^public$|^return$|^short$|^static$|^switch$|^synchronized$|^this$|^throws$|^throw$|^transient$|^true$|^try$|^typeof$|^var$|^void$|^volatile$|^while$|^with$|^yield$|^class$|^enum$|^export$|^extends$|^import$|^super$|^from$)
    identifier:
        - "[$A-Za-z_][$A-Za-z0-9_]*"
    comment:
        - \/\/[^\n\r]*(?=[\n\r])
        - \/\/.*$
        - \/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/
    string:
        - \"([^"]|\\\")*\"
        - \'[^']*\'
    regex:
        - \/([^/]|\\\/)*\/[gim]*
    number:
        - \-?[0-9]*\.[0-9]e\-?[0-9]+
        - \-?[0-9]*\.[0-9]
        - \-?[1-9][0-9]*
        - \-?0[Xx][0-9A-Fa-f]+
        - \-?[0-9]
        - \-?0[0-7]+
    operator:
        - (\=\=\=|\!\=\=)
        - (\<\=|\>\=|\=\=|\!\=|\=\>)
        - (\&\&|\|\||\!)
        - (\+\=|\-\=|\/\=|\*\=|\%\=|\+\+|\-\-)
        - (\&|\||\~|\^|\<\<|\>\>)
        - (\=|\+|\-|\/|\*|\%)
        - (\.|\,|\:)
        - (\<|\>|\?)
    parenthesis:
        - (\(|\)|\[|\]|\{|\})
    semicolon:
        - \;
    newline:
        - "[\\n\\r]"
    space:
        - \s+
