lexer:
    keyword:
        - (?:abstract|arguments|boolean|break|byte|case|catch|char|const|continue|debugger|default|delete|do|double|else|eval|false|final|finally|float|for|function|goto|if|implements|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield|class|enum|export|extends|import|super|from)
    identifier:
        - "[$A-Za-z_][$A-Za-z0-9_]*"
    comment:
        - \/\/[^\n\r]*[\n\r]
        - \/\/.*$
        - \/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/
    string:
        - \"([^"]|\\\")*\"
        - \'[^']*\'
    number:
        - \-?[0-9]*\.[0-9]e\-?[0-9]+
        - \-?[0-9]*\.[0-9]
        - \-?[1-9][0-9]*
        - \-?0[Xx][0-9A-Fa-f]+
        - \-?[0-9]
        - \-?0[0-7]+
    operator:
        - (\=\=\=|\!\=\=)
        - (\<\=|\>\=|\=\=|\!\=)
        - (\&\&|\|\||\!)
        - (\+\=|\-\=|\/\=|\*\=|\%\=|\+\+|\-\-)
        - (\&|\||\~|\^|\<\<|\>\>)
        - (\=|\+|\-|\/|\*|\%)
        - (\.|\,|\:)
        - (\<|\>)
    parenthesis:
        - (\(|\)|\[|\]|\{|\})
    semicolon:
        - \;
    newline:
        - "[\\n\\r]"
    space:
        - \s+
