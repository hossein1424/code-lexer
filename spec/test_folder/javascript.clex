keyword:(?:abstract|arguments|boolean|break|byte|case|catch|char|const|continue|debugger|default|delete|do|double|else|eval|false|final|finally|float|for|function|goto|if|implements|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield|class|enum|export|extends|import|super|from)
identifier:[$A-Za-z_][$A-Za-z0-9_]*
comment:\/\/[^\n\r]*[\n\r]
comment:\/\/.*$
comment:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/
string:\"([^"]|\\\")*\"
string:\'[^']*\'
number:\-?[0-9]
number:\-?[1-9][0-9]*
number:\-?[0-9]*\.[0-9]
number:\-?[0-9]*\.[0-9]e\-?[0-9]+
number:\-?0[Xx][0-9A-Fa-f]+
number:\-?0[0-7]+
operator:(\=\=\=|\!\=\=)
operator:(\<\=|\>\=|\=\=|\!\=)
operator:(\&\&|\|\||\!)
operator:(\+\=|\-\=|\/\=|\*\=|\%\=|\+\+|\-\-)
operator:(\&|\||\~|\^|\<\<|\>\>)
operator:(\=|\+|\-|\/|\*|\%)
operator:(\.|\,|\:)
operator:(\<|\>)
parenthesis:(\(|\)|\[|\]|\{|\})
semicolon:\;
newline:[\n\r]
space:\s+
